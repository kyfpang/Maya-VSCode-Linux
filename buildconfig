#-
# ==========================================================================
# Copyright 2017 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk
# license agreement provided at the time of installation or download,
# or which otherwise accompanies this software in either electronic
# or hard copy form.
# ==========================================================================
#+
mayaVersion := 2018
gccVersion := 

DEVKIT_LOCATION = /sw/pkg/maya/$(mayaVersion)/maya$(mayaVersion)
export DEVKIT_LOCATION
$(info    Devkit location is $(DEVKIT_LOCATION))

#-------------------------------------------------------------
#
#       Try to find the devkit
#
#-------------------------------------------------------------


# Actually devkitBase location
ifeq ($(DEVKIT_LOCATION),)
    DEVKIT_LOCATION =  $(strip $(realpath $(CURDIR)/../..))
endif

ifneq ($(wildcard $(DEVKIT_LOCATION)/include/maya/MTypes.h),)
    #devkitBase/devkit
    DEVKIT = $(DEVKIT_LOCATION)/devkit
    DEVKIT_INCLUDE = $(DEVKIT_LOCATION)/include
    DEVKIT_LIB=$(DEVKIT_LOCATION)/lib
    DEVKIT_BIN=$(DEVKIT)/bin
else 
    $(error The DEVKIT_LOCATION environment variable does not point to the devkitBase location)
endif


#-------------------------------------------------------------
#
#		Try to find the correct version of gcc
#
#-------------------------------------------------------------

# If 'CC' is undefined or is the wrong version of gcc then we need to
# try to find the correct version.
ifneq ($(CC),)
    CC := gcc
endif

# If 'CXX' is undefined or is the wrong version of g++ then we need to
# try to find the correct version.
ifneq ($(CXX),)
	CXX := g++
endif


#-------------------------------------------------------------
#
#		Miscellaneous other settings.
#
#-------------------------------------------------------------

CFLAGS = -DBits64_ -m64 -DUNIX -D_BOOL -DLINUX -DFUNCPROTO -D_GNU_SOURCE \
         -DLINUX_64 -fPIC \
         -fno-strict-aliasing -DREQUIRE_IOSTREAM -O3 -Wall \
         -Wno-multichar -Wno-comment -Wno-sign-compare -funsigned-char \
         -pthread

C++FLAGS = $(CFLAGS) $(WARNFLAGS) \
        -std=c++11 \
        -Wno-deprecated -Wno-reorder \
        -fno-gnu-keywords

DEVKIT_ALEMBIC_INCDIR = $(DEVKIT)/Alembic/include
DEVKIT_ALEMBIC_LIBDIR = $(DEVKIT)/Alembic/lib

INCLUDES	= -I$(SRCDIR) -I$(DEVKIT_INCLUDE) -I/usr/X11R6/include

# -Bsymbolic binds references to global symbols within the library.
# This avoids symbol clashes in other shared libraries but forces
# the linking of all required libraries.
LFLAGS        = $(C++FLAGS) -Wl,-Bsymbolic -shared

# When compiling plug-ins for Maya, we make sure to export only the
# symbols for the initializePlugin(MObject) and
# uninitializePlugin(MObject) functions. In particular, this
# prevents the plug-ins from exporting symbols coming from static
# libaries against which the plug-ins is linked.
#
# Here's why:
#
# Plug-ins are written by separate developers. Each of them might
# want to use various libraries to implement their plug-ins. At
# times, it occurs that plug-ins written by different developers are
# using different and "incompatible" versions of the same library. To
# support this, we recommend that plug-ins be linked against static
# versions of these libraries. And, by hidding the symbols of these
# libraries, we prevent the two incompatible versions of the library
# from interferring with each others.
LFLAGS 		 += -Wl,--version-script=$(TOP)/linux_plugin.map

LD            = $(CXX) 
LIBS          = -L$(DEVKIT_LIB)
EXT           = so

# Makedepend flags
#
# Ignore dependencies on system header files.
MDFLAGS = -Y

# Find out if the Qt development tools are installed.
# we want to use the  qmake file provided by Maya, not the system
ifneq ($(wildcard $(DEVKIT_BIN)/qmake),)
        QMAKE = $(DEVKIT_BIN)/qmake
else
        $(error The DEVKIT_LOCATION environment variable does not point towards the \
                directory where Maya's devkit qmake is located)
endif


ifneq ($(QMAKE),)
  # We want to generate a Makefile, not an xcode project.
  QMAKE += -spec $(DEVKIT_LOCATION)/mkspecs/linux-g++
endif

