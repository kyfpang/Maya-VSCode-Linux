#-
# ==========================================================================
# Copyright (c) 2011 Autodesk, Inc.
# All rights reserved.
# 
# These coded instructions, statements, and computer programs contain
# unpublished proprietary information written by Autodesk, Inc., and are
# protected by Federal copyright law. They may not be disclosed to third
# parties or copied or duplicated in any form, in whole or in part, without
# the prior written consent of Autodesk, Inc.
# ==========================================================================
#+

INCL_BUILDRULES := 1
include $(TOP)/buildconfig


#Add directories variables
OBJBASEDIR := ./build
OBJDIR := ./build/$(mayaVersion)
OUTPUTBASEDIR := ./bin
OUTPUTDIR := ./bin/$(mayaVersion)
SRCDIR := ./src

##################
# Generic Rules  #
##################

.PHONY    : all plugins depend clean Clean
.DEFAULT  : all

all : plugins

# Pre-built binaries of some plugins are shipped with Maya. We don't
# want to build them by default with all the others because then there
# would be two versions of the same plugin and unless you know exactly
# what you are doing the wrong one might get loaded.
#
# The top-level makefile of the devkit won't recurse by default into
# the sub-directory of prebuilt plugins. So if you want to build one
# of these you must do so explicitly by invoking make from the given
# sub-directory or invoke the prebuiltPlugins rules from the top-level
# makefile.
.PHONY  : prebuiltPlugins

# The top-level makefile of the devkit won't recurse by default into
# the sub-directory of plugins depending on third-party components. So
# if you want to build one of these you must do so explicitly by
# invoking make from the given sub-directory or invoke the
# thirdPartyPlugins rules from the top-level makefile. For example:
.PHONY	: thirdPartyPlugins


##################
# Generic Rules  #
##################

#Creating directories
directories: $(OBJDIR) $(OUTPUTDIR)		

$(OBJDIR): 
	mkdir -p $(OBJDIR)

$(OUTPUTDIR): 
	mkdir -p $(OUTPUTDIR)

$(OBJDIR)/%.o :	$(SRCDIR)/%.c
	$(CC) -c $(INCLUDES) $(CFLAGS) $< -o $@

$(OBJDIR)/%.o :	$(SRCDIR)/%.cpp
	$(CXX) -c $(INCLUDES) $(C++FLAGS) $< -o $@

%.i :	$(SRCDIR)/%.cpp
	$(CXX) -E $(INCLUDES) $(C++FLAGS) $*.cpp > $*.i

